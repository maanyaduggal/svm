# -*- coding: utf-8 -*-
"""SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-078LmebL5edY5rIexz7yRrVRR7yVRsR
"""

# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import accuracy_score
import numpy as np

# Load the dataset
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
df = pd.read_csv(url, header=None)

# Set column names
df.columns = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'class']

# Set X and y
X = df.drop(['class'], axis=1)
y = df['class']

# Set range of C and gamma values
param_grid = {'C': [0.1, 1, 10, 100], 'gamma': [1, 0.1, 0.01, 0.001]}

# Set number of iterations
n_iter = 1000

# Set number of samples
n_samples = 10

# Set empty list to store accuracy scores
accuracy_scores = []

# Split the dataset into 10 different samples and optimize SVM for each sample
for i in range(n_samples):
  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=i)
  
  # Create a grid search object and fit on the training data
  grid = GridSearchCV(svm.SVC(max_iter=n_iter), param_grid, verbose=3, n_jobs=-1, cv=5)
  grid.fit(X_train, y_train)

  # Predict the test set
  y_pred = grid.predict(X_test)

  # Calculate accuracy score and append to list
  accuracy_scores.append(accuracy_score(y_test, y_pred))

  # Print the best parameters and accuracy score
  print("Sample {}: Best parameters: {}, Accuracy score: {}".format(i+1, grid.best_params_, accuracy_score(y_test, y_pred)))

# Calculate the mean accuracy score and standard deviation
mean_accuracy_score = np.mean(accuracy_scores)
std_accuracy_score = np.std(accuracy_scores)

# Print the mean and standard deviation of accuracy score
print("Mean accuracy score: {}".format(mean_accuracy_score))
print("Standard deviation of accuracy score: {}".format(std_accuracy_score))

